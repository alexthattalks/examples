- name: Delete Date Filter
  # start off fresh by deleting existing filters
  redhat.satellite.content_view_filter:
    name: "{{ filter_name_date }}"
    organization: "{{ org_name }}"
    content_view: "{{ primary_content_view }}"
    filter_type: "erratum"
    filter_state: "absent"
    
- name: Delete RPM Filter
  redhat.satellite.content_view_filter:
    name: "{{ filter_name_rpm }}"
    organization: "{{ org_name }}"
    content_view: "{{ primary_content_view }}"
    filter_type: "rpm"
    filter_state: "absent"
    
- name: Delete Errata Filter
  redhat.satellite.content_view_filter:
    name: "{{ filter_name_errata }}"
    organization: "{{ org_name }}"
    content_view: "{{ primary_content_view }}"
    filter_type: "erratum"
    filter_state: "absent"

- name: Delete Module Filter
  command: 
    argv:
      - hammer 
      - content-view
      - filter 
      - delete 
      - --name 
      - "{{ filter_name_module }}"
      - --content-view 
      - "{{ primary_content_view }}"
      - --organization 
      - "{{ org_name }}"
  ignore_errors: yes

- name: Update Include Erratum To Date Filter
  # Create/update filter locking erratum content to a specific date
  redhat.satellite.content_view_filter:
    name: "{{ filter_name_date }}"
    organization: "{{ org_name }}"
    content_view: "{{ primary_content_view }}"
    filter_type: "erratum"
    end_date: "{{ end_date }}"
    date_type: "updated"
    inclusion: "yes"
  when: end_date|length != 0
    
- name: Update Include Packages without Errata
  # Create/update filter including packages without any errata (original packages)
  redhat.satellite.content_view_filter:
    name: "{{ filter_name_rpm }}"
    organization: "{{ org_name }}"
    content_view: "{{ primary_content_view }}"
    filter_type: "rpm"
    rule_state: absent
    original_packages: "yes"
    inclusion: "yes"
  when: end_date|length != 0

- name: Update Include Specific Erratum
  # Create filter adding in specific errata AFTER the locked date above
  redhat.satellite.content_view_filter:
    name: "{{ filter_name_errata }}"
    organization: "{{ org_name }}"
    content_view: "{{ primary_content_view }}"
    filter_type: "erratum"
    # Errata ID from survey
    errata_id: "{{ errata_id }}"
    inclusion: "yes"
  when: end_date|length != 0

- name: Update Include Modules without Errata
  command: 
    argv:
      - hammer 
      - content-view
      - filter 
      - create 
      - --name 
      - "{{ filter_name_module }}"
      - --content-view 
      - "{{ primary_content_view }}"
      - --organization 
      - "{{ org_name }}"
      - --type
      - modulemd
      - --original-module-streams
      - true
      - --inclusion
      - true
  ignore_errors: yes
  when: end_date|length != 0 and ("8" or "9") in primary_content_view
